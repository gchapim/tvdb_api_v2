---
http_interactions:
- request:
    method: get
    uri: https://api.thetvdb.com/series/78804/episodes
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Content-Type:
      - application/json
      Accept:
      - application/json
      Authorization:
      - Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0OTY3ODUxODgsImlkIjoiTmV0c2VyaWVzIiwib3JpZ19pYXQiOjE0OTY2OTg3ODh9.zum52vLK3p2UO2Qa4R72TLT_3nnql95uLrBtlHoUX5D9CUeNB6vNNZhvmoewRZPMGIctyUdljpSQGz8UnVHQK03LuoFi8ZhBKF8mLpbgWmzLNAMc1l_UPiYsQgjSgo98_KSl8qPOtM4R7nzLbk7n6Th8HrdlYiFOxBrihkq3ZEEv54rVkQOZhjkiTLr_z2nmioYLeRhk9t1YY0w36yN1EQsK-CsoqBe8V1Pf98ZKkvyiwEnBuLLRl3VRxSvxWEW028BG6XGOJD5e3UUUZuUBlk6kMzPuIE6RoVwB_9e-tNVYB2scQ4Zr2b_TpFERrofj_pbov8T6f0wTq0wEbYpaew
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 05 Jun 2017 22:58:16 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=dd9a8943d88a82c5fbfcd7306bd42ac211496703496; expires=Tue, 05-Jun-18
        22:58:16 GMT; path=/; domain=.thetvdb.com; HttpOnly
      Cache-Control:
      - private, max-age=600
      Vary:
      - Accept-Language
      X-Powered-By:
      - Thundar!
      X-Thetvdb-Api-Version:
      - 2.1.2
      Server:
      - cloudflare-nginx
      Cf-Ray:
      - 36a6bc52aa334abb-GRU
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 05 Jun 2017 22:58:20 GMT
recorded_with: VCR 3.0.3
